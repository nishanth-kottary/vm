# Test if an input number if prime 

# global variables 
:input 0
:divisor 2

__CODE__

READ                       # read a decimal number.
PUSH &input                # store it in input label.
PUT

PUSH &input                # Special cases.
GET
PUSH 2                     # if 2 then prime.
EQU
PUSH &prime
GOIF
GRT                        # If less than 2 then not prime.
PUSH &not_prime
GOIF

PUSH &divisor
GET

:start

DUP

PUSH &input
GET
DIV
POP                        # Discard the quotient.
PUSH 0                     # Check if remainder is 0.
EQU                         
POP POP                    # clear 0 and the remainder.
                           # TOS is now divisor.
PUSH &not_prime            
GOIF

PUSH 1                     # Add 1 to the divisor.
ADD

PUSH &input                # If divisor is not equal to input
GET
EQU                        # continue loop.
POP                        # remove input from stack.
                           # TOS is now divisor.
PUSH &start
GOUN

:prime
# call print with argument 'prime'
PUSH &end
PUSH 0
PUSH 'e'
PUSH 'm'
PUSH 'i'
PUSH 'r'
PUSH 'p'
PUSH &print
GOTO

:not_prime
# call print with argument 'not prime'
PUSH &end
PUSH 0
PUSH 'e'
PUSH 'm'
PUSH 'i'
PUSH 'r'
PUSH 'p'
PUSH 32
PUSH 't'
PUSH 'o'
PUSH 'n'
PUSH &print
GOTO

:end
END

##########    PRINT SUBROUTINE   ###########
:print                 
PUSH 0
EQU
POP                     # pop the 0.
PUSH &ret               # If top of stack is zero stop printing.
GOIF
WRTC                    # print the character.
PUSH &print             # loop.
GOTO

:ret
POP                     # POP the 0.
GOTO                    # TOS is return address, so go to it.
